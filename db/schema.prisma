datasource postgres {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../db/generated/type-graphql"
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  profile   Profile?
  meals     Meal[]
  weighIns  WeighIn[]
  workouts  Workout[]
  recipes   Recipe[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Profile {
  id              Int     @id @default(autoincrement())
  user            User    @relation(fields: [userId], references: [id]) 
  userId          Int     @unique
  firstName       String
  lastName        String
  calorieGoal     Int
  weightGoal      Decimal
  metric          Boolean
}

model WeighIn {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id]) 
  userId    Int 
  weight    Decimal
  createdAt DateTime  @default(now())
}
  
model Workout {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id]) 
  userId    Int 
  name      String
  calories  Int
}

model Recipe {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id]) 
  userId    Int 
  name      String
  foods     FoodInRecipe[]
  meals     RecipeInMeal[]
}

model Meal {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id]) 
  userId    Int
  mealType  MealType
  foods     FoodInMeal[]
  recipes   RecipeInMeal[]
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model RecipeInMeal {
  id        Int   @id @default(autoincrement())
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  recipeId  Int
  meal      Meal  @relation(fields: [mealId], references: [id])
  mealId    Int
  quantity  Decimal
  unit      Unit   @relation(fields: [unitId], references: [id])
  unitId    Int
}

model Food {
  id        Int       @id @default(autoincrement())
  name      String
  brand     String
  // need to allow for different quantities
  nutrition FoodNutrition[]
  meals     FoodInMeal[]
  recipes   FoodInRecipe[]
  
  @@unique([name, brand])
}

model FoodNutrition {
  id        Int   @id @default(autoincrement())
  food      Food  @relation(fields: [foodId], references: [id])
  foodId    Int
  quantity  Decimal
  unit      Unit   @relation(fields: [unitId], references: [id])
  unitId    Int
  calories  Int
  protein   Decimal
  fat       Decimal
  carbs     Decimal
}


model FoodInRecipe {
  id        Int   @id @default(autoincrement())
  food      Food  @relation(fields: [foodId], references: [id])
  foodId    Int
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  recipeId  Int
  quantity  Decimal
  unit      Unit   @relation(fields: [unitId], references: [id])
  unitId    Int
}

model FoodInMeal {
  id        Int   @id @default(autoincrement())
  food      Food  @relation(fields: [foodId], references: [id])
  foodId    Int
  meal      Meal  @relation(fields: [mealId], references: [id])
  mealId    Int
  quantity  Decimal
  unit      Unit   @relation(fields: [unitId], references: [id])
  unitId    Int
}

model Unit {
  id            Int     @id @default(autoincrement())
  name          String
  shortname     String
  volume        Boolean
  // conversion factor
  mealFoods     FoodInMeal[]
  mealRecipe    RecipeInMeal[]
  recipeFoods   FoodInRecipe[]
  foodNutrition FoodNutrition[]
}

